<project basedir="." name="bigvisiblewall" default="test">

    <property name="web.dir" value="${basedir}/web" />
    <property name="runtime.dir" value="${basedir}/runtime" />
    <property name="prod.lib.dir" value="${basedir}/lib/prod"/>
    <property name="test.lib.dir" value="${basedir}/lib/test"/>
    <property name="scala-src.dir" value="${basedir}/src"/>
    <property name="scala.test.dir" value="${basedir}/test"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="test-reports.dir" value="${build.dir}/reports"/>
    <property name="compiled.code.dir" value="${build.dir}/compile"/>
    <property name="build.number" value="SNAPSHOT" />
    <property name="deploy-repo" value="//netshare" />

    <path id="prod.classpath">
        <fileset dir="${prod.lib.dir}" includes="*.jar"/>
    </path>

    <path id="test.classpath">
        <path refid="prod.classpath"/>
        <fileset dir="${test.lib.dir}" includes="*.jar"/>
        <fileset dir="${dist.dir}" includes="*.jar"/>
    </path>

    <path id="scala.classpath">
        <pathelement location="${prod.lib.dir}/scala-compiler.jar"/>
        <pathelement location="${prod.lib.dir}/scala-library.jar"/>
    </path>

    <taskdef resource="scala/tools/ant/antlib.xml">
        <classpath refid="scala.classpath"/>
    </taskdef>

    <macrodef name="compile.and.jar">
        <attribute name="src"/>
        <attribute name="dest"/>
        <attribute name="classpathref"/>

        <sequential>
            <mkdir dir="${build.dir}/compile"/>
            <scalac srcdir="@{src}" destdir="${compiled.code.dir}" classpathref="@{classpathref}"/>
            <jar destfile="@{dest}">
                <fileset dir="${compiled.code.dir}"/>
                <fileset dir="@{src}"/>
            </jar>
        </sequential>
    </macrodef>

    <target name="clean">
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="build" depends="clean">
        <mkdir dir="${dist.dir}"/>
        <compile.and.jar src="${scala-src.dir}" classpathref="prod.classpath"
                         dest="${dist.dir}/bigvisiblewall-scala.jar"/>
    </target>

    <target name="dist" depends="test" description="Creates a ZIP containing the build code and all dependencies">
        <exec executable="git" outputproperty="build.branch">
            <arg value="symbolic-ref"/>
            <arg value="--short"/>
            <arg value="-q"/>
            <arg value="HEAD"/>
        </exec>

        <zip destfile="${dist.dir}/bigvisiblewall-${build.branch}-${build.number}.zip">
            <fileset dir="${dist.dir}" includes="*.jar"/>
            <fileset dir="${basedir}" includes="README" />
            <fileset dir="${prod.lib.dir}" includes="*.jar"/>
            <zipfileset dir="${web.dir}" prefix="web"/>
            <fileset dir="${runtime.dir}" />
        </zip>
    </target>

    <target name="test" depends="build" description="Runs all tests">
        <compile.and.jar src="${scala.test.dir}" classpathref="test.classpath"
                         dest="${dist.dir}/scala-test.jar"/>

        <taskdef name="junit"
                 classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

        <mkdir dir="${test-reports.dir}"/>
        <junit haltonfailure="true" showoutput="true">
            <classpath refid="test.classpath"/>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <batchtest fork="yes" todir="${test-reports.dir}">
                <fileset dir="${compiled.code.dir}">
                    <include name="**/*Tests.class"/>
                    <exclude name="**/All*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="deploy" depends="">
        <exec executable="git" outputproperty="build.branch">
            <arg value="symbolic-ref"/>
            <arg value="--short"/>
            <arg value="-q"/>
            <arg value="HEAD"/>
        </exec>

        <copy file="${dist.dir}/bigvisiblewall-${build.branch}-${build.number}.zip" tofile="${deploy.repo}/builds/BigVisibleWall/bigvisiblewall-${build.branch}-${build.number}/bigvisiblewall-${build.branch}-${build.number}.zip"/>
    </target>

</project>